/*
Pr치ctica 3.1: Se ha solicitado un script que permita cargar las precipitaciones promedio en cada mes
del pa칤s (en nuestro caso ser치n generadas de manea aleatorias con valores comprendidos entre
[15;35]췈), en base a esos datos determinar:

el promedio anual de lluvias
el promedio de lluvias para el segundo semestre del a침o
el mes m치s seco del a침o Pr치ctica 3.1.js
*/
function ej1() {
    Meses = ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"];

    const precipitaciones = [];

    for (let i = 0; i < Meses.length; i++) {
        precipitaciones.push(Math.floor(Math.random() * 20) + 15);

    };
    console.log(precipitaciones)

    function average(precipitaciones) {
        var total = 0;
        for (var i = 0; i < precipitaciones.length; i++) {
            total += precipitaciones[i];
        }
        var avg = total / precipitaciones.length;
        return avg
    }

    console.log(average(precipitaciones));

    precipitaciones2sem = precipitaciones.slice(6);

    console.log(average(precipitaciones2sem))

    let menor = precipitaciones[0];
    let nombre = 0;
    for (var i = 0; i < precipitaciones.length; i++) {
        if (precipitaciones[i] < menor) {
            menor = precipitaciones[i]
            nombre = i
        }
    }

    console.log(Meses[nombre])

    var arr = []; // create empty array to store generated values
    for (i = 0; i < 12; ++i) {// loop through 12 times and generate random value between range of [15,36]
        var rndNum = Math.floor(Math.random() * ((37 - 14) + 1)); // generates a number from the given range using floor function to get only integer values in that range (14 - 29) and random value between them generated by randnum variable, which is an array of numbers
        arr[i] = rndNum;// store each randomly selected number into corresponding index position within the empty array.
    }

    console.log(arr)

}

/*
Crear un array con al menos 8 personas. Usar la clase persona previamente definida. Definir funciones que reciban como argumento el array vuelvan:
1- Personas mayores de edad: mayoresDeEdad(personas)
2- Persona cuya profesi칩n sea una pasada por argumento, ej: personasXProfesion(personas, 'superheroe')
3- obtenerPersonaMasGrande(personas), tener en cuenta que ahora recibe como argumento un array con n personas.
4- obtenerProfesiones(personas). // sin duplicados
*/

class Persona {
    constructor(nombre, correo, profesion, fechaNacimiento) {
        this.nombre = nombre;
        this.correo = correo;
        this.profesion = profesion;
        this.fechaNacimiento = fechaNacimiento;
    }
    saludar() {
        console.log('Hola soy ' + this.nombre);
    }
    edad() {
        const hoy = new Date();
        return hoy.getFullYear() - this.fechaNacimiento.getFullYear();
    }
    esMayorEdad() {
        return this.edad() > 18;
    }
}

const maria = new Persona('Mar칤a', 'maria@gmail.com', 'Ingeniero en Sistemas de Informaci칩n', new Date(1990, 9, 1));
const pibee = new Persona('pibee', 'pibasoo@gmail.com', 'es bueno', new Date(2012, 9, 1));
const pelado = new Persona('pelado', 'pelado@gmail.com', 'hace chistes en tiktok', new Date(1994, 9, 1));
const jesus = new Persona('jesus', 'jesus@gmail.com', 'es jesus', new Date(2012, 9, 1));
const pepito = new Persona('pepito', 'pepito@gmail.com', 'lo mantienen', new Date(2012, 9, 1));
const tomii = new Persona('tomii', 'tomii@gmail.com', 'cocina', new Date(2012, 9, 1));
const messi = new Persona('messi', 'messi@gmail.com', 'fulbo', new Date(2012, 9, 1));
const pepote = new Persona('pepote', 'pepote@gmail.com', 'lo mantienen', new Date(2012, 9, 1));

const personas = [maria, pibee, pelado, jesus, pepito, tomii, messi, pepote];

// Sirve para ver los nombres de los objetos filtrados. Si no se usa se muestra [Persona, Persona, Persona] por ej.
function verNombres(personas) {
   console.log(personas.map(personas => personas.nombre));
}

// Crea otro array usando el condicional de la clase Persona
function mayoresDeEdad(personas) {
    return personas.filter((persona) => persona.esMayorEdad());
}

console.log('Mayores de edad: 游녢');
verNombres(mayoresDeEdad(personas))

// Hace la comparaci칩n en la propia funci칩n
function personasXProfesion(personas, string) {
    return personas.filter((persona) => persona.profesion == string)
}

console.log('Personas x profesion: 游녢');
verNombres(personasXProfesion(personas, 'es jesus'));

// Crea otro array ordenado de edades de menor a mayor. Luego busca la 칰ltima posici칩n (length-1) y muestra el nombre.
function obtenerPersonaMasGrande(personas) {
    const personasPorEdad = personas.sort((a, b) => a.edad()-b.edad());
    return personasPorEdad[personasPorEdad.length-1].nombre;
}

console.log('Persona m치s cercana a la tercera edad: 游녢 \n', obtenerPersonaMasGrande(personas))

// Recorre el array y toma el atributo "profesion" de cada elemento. El constructor "new Set" crea un objeto s칩lo con valores 칰nicos. "..." vuelve a convertir los objetos en array.

function obtenerProfesiones(personas) {
    const profesiones = personas.map(personas => personas.profesion);
    return [...new Set(profesiones)]
}

console.log('Profesiones (칰nicas): 游녢 \n',obtenerProfesiones(personas))